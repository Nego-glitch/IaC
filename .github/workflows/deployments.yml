name: deployments

on:
  push:
    branches:
      - 'main'
      - 'dev'
      - 'staging'
      - 'prod'
  pull_request:
    branches:
      - 'main'
      - 'dev'
      - 'staging'
      - 'prod'

env:
  WORKING_DIR: ./deployments

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1

      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Terraform Init'
        run: terraform init -reconfigure
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform select or create workspace'
        run: 
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            terraform workspace select main || terraform workspace new main
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            terraform workspace select dev || terraform workspace new dev
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            terraform workspace select staging || terraform workspace new staging
          elif [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            terraform workspace select prod || terraform workspace new prod
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Format'
        run: terraform fmt -check
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Validate'
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Lint'
        run: tflint
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Security Check'
        run: tfsec .
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Plan'
        run: terraform plan -out=tfplan
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Apply'
        if: github.ref != 'refs/heads/prod'
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.WORKING_DIR }}

      - name: 'Terraform Apply (Prod)'
        if: github.ref == 'refs/heads/prod'
        run: terraform apply tfplan
        env:
          TF_VAR_approval: ${{ secrets.TF_VAR_APPROVAL }}
        working-directory: ${{ env.WORKING_DIR }}
